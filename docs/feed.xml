<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Road to Kaggle TOP 50</title>
  <subtitle></subtitle>
  <link href="https://ymolchanov.github.io//feed.xml" rel="self"/>
  <link href="https://ymolchanov.github.io//"/>
  
    <updated>2021-02-07T00:00:00Z</updated>
  
  <id>https://ymolchanov.github.io/</id>
  <author>
    <name>Yury Molchanov</name>
    <email>0x4d59@gmail.com</email>
  </author>
  
    
    <entry>
      <title>Here we go</title>
      <link href="https://ymolchanov.github.io//posts/here-we-go/"/>
      <updated>2021-01-31T00:00:00Z</updated>
      <id>https://ymolchanov.github.io//posts/here-we-go/</id>
      <content type="html">
        <![CDATA[
      <p>To be a TOP-50 Kaggler is very hard. You must have a master of grandmaster tier. It is really high requirement. And it is not possible to achive this place by accident.</p>
<p>When I set this goal I don't know that Kaggle has four different <em>categories of expertise</em>. After reading <a href="https://www.kaggle.com/progression">this article</a> I understand that I want to achive expertiese in Competition category. And all other categories don't make sence for me.</p>
<p>It is useful to eat elephant piece-by-piece so I will do it in this way.</p>
<p>So <strong>first big goal</strong> is to achive Expert tier in Competition category.<br>
To achieve it I need to get 2 bronse medals in competitions.</p>
<p>What I need to do:</p>
<ul>
<li>understand in what field I need to improve my expertise (it is important, because I can't be good in every field of Machine Learning)</li>
<li>learn courses and read about it</li>
<li>check competition in this field (like computer vision)</li>
</ul>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>The ideas for my projects</title>
      <link href="https://ymolchanov.github.io//posts/ideas/"/>
      <updated>2021-01-31T00:00:00Z</updated>
      <id>https://ymolchanov.github.io//posts/ideas/</id>
      <content type="html">
        <![CDATA[
      <h2>Serverside programming</h2>
<ul>
<li><strong>Service that helps to add Magic Link to the site.</strong></li>
</ul>
<h2>Computer science</h2>
<ul>
<li></li>
</ul>
<h2>Projects</h2>
<ul>
<li>System that could identify family member and in which time he come. Write it to database and have REST API by which we can get this data in CSV format.</li>
</ul>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>What is the term &quot;model&quot; means? 0.1.0</title>
      <link href="https://ymolchanov.github.io//posts/what-is-term-model-means/"/>
      <updated>2021-01-31T00:00:00Z</updated>
      <id>https://ymolchanov.github.io//posts/what-is-term-model-means/</id>
      <content type="html">
        <![CDATA[
      <p>Here the sentence: &quot;Decision Trees are a type of model&quot;.</p>
<p>OK, seems true.</p>
<p>But what is a model?<br>
As I understand, model - is a function. And this function take data in and return something out.
But this function not &quot;static&quot;, it is not just a piece of code or some mapping for values. It is a mathematical function that can be &quot;trained&quot;. So it could improve over time by Machine Learning algorithms.</p>
<pre class="language-python"><code class="language-python">model <span class="token operator">=</span> DecisionTreeModel<span class="token punctuation">(</span><span class="token punctuation">)</span><br>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>training_data<span class="token punctuation">,</span> results<span class="token punctuation">)</span><br>results <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span></code></pre>
<p>ðŸ‘† it is just an example, where model is an object with several methods. But, as I understand, it makes for comfortable model usage in code.</p>
<p>Here is what Wikipedia writes about it:<br>
A mathematical model is <strong>a description</strong> of a system using mathematical concepts and language.</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>And here is the Kaggle&#39;s Deep Learning Course 0.1.3</title>
      <link href="https://ymolchanov.github.io//posts/and-first-step-is/"/>
      <updated>2021-02-07T00:00:00Z</updated>
      <id>https://ymolchanov.github.io//posts/and-first-step-is/</id>
      <content type="html">
        <![CDATA[
      <h2>What is the Deep Learning?</h2>
<p>It is the field inside Machine Learning. Which mostly connected with neural network method.</p>
<h2>Why is this so important?</h2>
<p>Quote:</p>
<blockquote>
<p>Some of the most impressive advances in artificial intelligence in recent years have been in the field of deep learning.</p>
</blockquote>
<h2>What are Learning Rate and Batch size?</h2>
<p>You probably saw that smaller batch sizes gave noisier weight updates and loss curves. This is because each batch is a small sample of data and smaller samples tend to give noisier estimates. Smaller batches can have an &quot;averaging&quot; effect though which can be beneficial.</p>
<p>Smaller learning rates make the updates smaller and the training takes longer to converge. Large learning rates can speed up training, but don't &quot;settle in&quot; to a minimum as well. When the learning rate is too large, the training can fail completely. (Try setting the learning rate to a large value like 0.99 to see this.)</p>
<h2>Underfitting or overfitting?</h2>
<p><img src="/images/hokey_stick.png" alt="">
Here we see the &quot;hokey stick&quot; plot.<br>
The gap between these curves is quite small and the validation loss never increases, so it's <strong>more likely that the network is underfitting than overfitting</strong>. It would be worth experimenting with more capacity to see if that's the case.</p>
<h2>Questions:</h2>
<p>Why we need a bias in our neurons?</p>
<h2>New words:</h2>
<p><strong>regression</strong> - machine learning problem that we solving (operate with continuous data)</p>
<p><strong>classification</strong> - machine learngin problem (operating with discrete data)</p>
<p><strong>dense layer</strong> - most simple neural network layer, we work with it in <a href="https://www.kaggle.com/ymolchanov/exercise-deep-neural-networks/edit">Lesson 2</a>.<br>
A Dense layer feeds all outputs from the previous layer to all its neurons, each neuron providing one output to the next layer. It's the <strong>most basic layer</strong> in neural networks.<br>
In general, they (dense layers) have the same formulas as the <em>linear layers</em> <code>wx+b</code>, but the end result is passed through a non-linear function called Activation function.<br>
Dense layers can be reduced back to linear layers if we use a linear activation!<br>
<a href="https://medium.com/datathings/dense-layers-explained-in-a-simple-way-62fe1db0ed75">About Dense layer in simple words</a><br>
<a href="https://medium.com/datathings/linear-layers-explained-in-a-simple-way-2319a9c2d1aa">About Linear layer</a></p>
<p><strong>TPU</strong> - <a href="https://en.wikipedia.org/wiki/Tensor_Processing_Unit">Tensor Processing Unit</a></p>
<p><strong>activation functions</strong> - activation function is simply some function we apply to each of a layer's outputs (its activations). It gives us more power, without it we can't move out of the world of lines and planes.</p>
<p><strong>rectifier function</strong> - one of the activation function ( <code>max(0, x)</code> )</p>
<p><strong>rectified linear unit or ReLU</strong> - is the neuron with rectifier function as activation function</p>
<p><strong>loss function</strong> - function that measures the disparity between the the target's true value and the value the model predicts.</p>
<p><strong>optimizer</strong> - The optimizer is an algorithm that adjusts the weights to minimize the loss</p>
<p>signal<br>
noise</p>
<h2>Map:</h2>
<p><a href="https://www.kaggle.com/ryanholbrook/a-single-neuron">First lesson of Kaggle's Deep Learning Course</a><br>
<a href="https://www.kaggle.com/ymolchanov/exercise-a-single-neuron/edit">First excercise</a><br>
<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head">Pandas DataFrame head method</a><br>
<a href="https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense">Keras Dense Layer doc</a><br>
<a href="https://www.tensorflow.org/api_docs/python/tf/keras/Sequential">Keras Sequential doc</a><br>
<a href="https://www.kaggle.com/ryanholbrook/deep-neural-networks">Second lesson</a><br>
<a href="https://www.kaggle.com/ymolchanov/exercise-deep-neural-networks/edit">Second excercise</a><br>
<a href="https://www.kaggle.com/ryanholbrook/stochastic-gradient-descent">Lesson 3: Stochastic Gradient Descent</a><br>
<a href="https://www.kaggle.com/ymolchanov/exercise-stochastic-gradient-descent/edit">Stochastic gradient descent</a><br>
<a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile">model.compile</a><br>
<a href="https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit">model.fit</a><br>
<a href="https://www.kaggle.com/ryanholbrook/overfitting-and-underfitting">Lesson 4: overfitting and underfitting</a>
<a href="https://www.kaggle.com/ymolchanov/exercise-overfitting-and-underfitting/edit">Excercise for Lesson 4: here I found good examples of data preparation</a><br>
<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html">pandas.DataFrame.dropna</a><br>
<a href="https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping">keras.callbacks.EarlyStopping</a><br>
<a href="https://www.kaggle.com/ryanholbrook/dropout-and-batch-normalization">Lesson 5: Dropout and Batch Normalization</a></p>

    ]]>
      </content>
    </entry>
  
</feed>